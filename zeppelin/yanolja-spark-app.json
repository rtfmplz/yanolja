{"paragraphs":[{"text":"val businessDF = spark.read.json(\"/Users/jae/git/yanolja/resources/yelp_academic_dataset_business.json\").drop(\"attributes\")\nval goodBusinessDF = businessDF\n      .filter(businessDF.col(\"stars\") > 4) // star 많이 받은 가게\n      .filter(businessDF.col(\"review_count\") > 100) // 리뷰가 충분히 있는 가게\n      .filter(businessDF.col(\"is_open\") === 1) // 현재 운영 중인 가게\n      .drop(\"is_open\")\n      .drop(\"review_count\")\n      .drop(\"stars\")\n      .drop(\"attributes\")\n      .drop(\"categories\")\n      .drop(\"hours\")\n      .drop(\"postal_code\")\n      .drop(\"state\")\n      .withColumnRenamed(\"business_id\", \"business-business_id\")\n    //      .withColumnRenamed(\"address\", \"business-address\")\n    //      .withColumnRenamed(\"city\", \"business-city\")\n    //      .withColumnRenamed(\"latitude\", \"business-latitude\")\n    //      .withColumnRenamed(\"longitude\", \"business-longitude\")\n    //      .withColumnRenamed(\"name\", \"business-name\")\ngoodBusinessDF.explain\ngoodBusinessDF.count\n// goodBusinessDF.show","user":"anonymous","dateUpdated":"2019-04-14T14:57:48+0900","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"== Physical Plan ==\n*(1) Project [address#920, business_id#922 AS business-business_id#1034, city#924, latitude#927, longitude#928, name#929]\n+- *(1) Filter (((((isnotnull(review_count#931L) && isnotnull(is_open#926L)) && isnotnull(stars#932)) && (stars#932 > 4.0)) && (review_count#931L > 100)) && (is_open#926L = 1))\n   +- *(1) FileScan json [address#920,business_id#922,city#924,is_open#926L,latitude#927,longitude#928,name#929,review_count#931L,stars#932] Batched: false, Format: JSON, Location: InMemoryFileIndex[file:/Users/jae/git/yanolja/resources/yelp_academic_dataset_business.json], PartitionFilters: [], PushedFilters: [IsNotNull(review_count), IsNotNull(is_open), IsNotNull(stars), GreaterThan(stars,4.0), GreaterTh..., ReadSchema: struct<address:string,business_id:string,city:string,is_open:bigint,latitude:double,longitude:dou...\nbusinessDF: org.apache.spark.sql.DataFrame = [address: string, business_id: string ... 11 more fields]\ngoodBusinessDF: org.apache.spark.sql.DataFrame = [address: string, business-business_id: string ... 4 more fields]\nres12: Long = 2623\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://192.168.1.215:4040/jobs/job?id=23","http://192.168.1.215:4040/jobs/job?id=24"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1553936490060_76435966","id":"20190330-180130_707678747","dateCreated":"2019-03-30T18:01:30+0900","dateStarted":"2019-04-14T14:57:48+0900","dateFinished":"2019-04-14T14:57:51+0900","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:219"},{"text":"val reviewDF = spark.read.json(\"/Users/jae/git/yanolja/resources/yelp_academic_dataset_review.json\")\nval goodLastestReviewDF = reviewDF\n  .filter(reviewDF.col(\"date\") > \"2018-01-01 00:00:00\") // 2018 년 이후 리뷰만\n  .filter(reviewDF.col(\"stars\") > 4) // star 많이 맏은 리뷰만\n  .filter(reviewDF.col(\"text\").contains(\"good\") || reviewDF.col(\"text\").contains(\"Good\") ||\n  reviewDF.col(\"text\").contains(\"great\") || reviewDF.col(\"text\").contains(\"Great\") ||\n  reviewDF.col(\"text\").contains(\"nice\") || reviewDF.col(\"text\").contains(\"Nice\") ||\n  reviewDF.col(\"text\").contains(\"cool\") || reviewDF.col(\"text\").contains(\"Cool\") ||\n  reviewDF.col(\"text\").contains(\"wonderful\") || reviewDF.col(\"text\").contains(\"impressive\") ||\n  reviewDF.col(\"text\").contains(\"fine\") || reviewDF.col(\"text\").contains(\"excellent\"))\n  .drop(\"stars\")\n  .drop(\"funny\")\n  .drop(\"cool\")\n  .drop(\"useful\")\n  .drop(\"review_id\")\n  .drop(\"date\")\n  .drop(\"text\")\n  .withColumnRenamed(\"business_id\", \"review-business_id\")\n  .withColumnRenamed(\"user_id\", \"review-user_id\") // 뒤에서 조인해서 신뢰할 만한 유저가 쓴건지 봐야지\n\n// goodLastestReviewDF.printSchema\ngoodLastestReviewDF.explain\ngoodLastestReviewDF.count\n// goodLastestReviewDF.show","user":"anonymous","dateUpdated":"2019-04-14T14:58:02+0900","config":{"colWidth":11,"fontSize":9,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":219,"optionOpen":false}}},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"== Physical Plan ==\n*(1) Project [business_id#1062 AS review-business_id#1115, user_id#1070 AS review-user_id#1118]\n+- *(1) Filter ((((isnotnull(date#1064) && isnotnull(stars#1067)) && (date#1064 > 2018-01-01 00:00:00)) && (stars#1067 > 4.0)) && (((((((((((Contains(text#1068, good) || Contains(text#1068, Good)) || Contains(text#1068, great)) || Contains(text#1068, Great)) || Contains(text#1068, nice)) || Contains(text#1068, Nice)) || Contains(text#1068, cool)) || Contains(text#1068, Cool)) || Contains(text#1068, wonderful)) || Contains(text#1068, impressive)) || Contains(text#1068, fine)) || Contains(text#1068, excellent)))\n   +- *(1) FileScan json [business_id#1062,date#1064,stars#1067,text#1068,user_id#1070] Batched: false, Format: JSON, Location: InMemoryFileIndex[file:/Users/jae/git/yanolja/resources/yelp_academic_dataset_review.json], PartitionFilters: [], PushedFilters: [IsNotNull(date), IsNotNull(stars), GreaterThan(date,2018-01-01 00:00:00), GreaterThan(stars,4.0)..., ReadSchema: struct<business_id:string,date:string,stars:double,text:string,user_id:string>\nreviewDF: org.apache.spark.sql.DataFrame = [business_id: string, cool: bigint ... 7 more fields]\ngoodLastestReviewDF: org.apache.spark.sql.DataFrame = [review-business_id: string, review-user_id: string]\nres13: Long = 388260\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://192.168.1.215:4040/jobs/job?id=25","http://192.168.1.215:4040/jobs/job?id=26"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1553937112163_-314780628","id":"20190330-181152_1547121082","dateCreated":"2019-03-30T18:11:52+0900","dateStarted":"2019-04-14T14:58:02+0900","dateFinished":"2019-04-14T14:59:04+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:220"},{"text":"val userDF = spark.read.json(\"/Users/jae/git/yanolja/resources/yelp_academic_dataset_user.json\")\nval goodUserDF = userDF\n  .filter(userDF.col(\"average_stars\") > 4) // good user\n  .filter(userDF.col(\"fans\") > 50) // famous user\n  .filter(userDF.col(\"review_count\") > 200) // famous user\n  .filter(userDF.col(\"useful\") > 500) // famous user\n  .drop(\"average_stars\")\n  .drop(\"fans\")\n  .drop(\"friends\")\n  .drop(\"review_count\")\n  .drop(\"useful\")\n  .drop(\"compliment_cool\")\n  .drop(\"compliment_cute\")\n  .drop(\"compliment_funny\")\n  .drop(\"compliment_hot\")\n  .drop(\"compliment_list\")\n  .drop(\"compliment_more\")\n  .drop(\"compliment_note\")\n  .drop(\"compliment_photos\")\n  .drop(\"compliment_plain\")\n  .drop(\"compliment_profile\")\n  .drop(\"compliment_writer\")\n  .drop(\"cool\")\n  .drop(\"elite\")\n  .drop(\"funny\")\n  .drop(\"name\")\n  .drop(\"yelping_since\")\n  .withColumnRenamed(\"user_id\", \"user-user_id\")\n      \ngoodUserDF.explain\ngoodUserDF.count\n// goodUserDF.show","user":"anonymous","dateUpdated":"2019-04-14T14:59:16+0900","config":{"colWidth":11,"fontSize":9,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":249,"optionOpen":false}}},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"== Physical Plan ==\n*(1) Project [user_id#1158 AS user-user_id#1413]\n+- *(1) Filter (((((((isnotnull(average_stars#1138) && isnotnull(useful#1157L)) && isnotnull(fans#1152L)) && isnotnull(review_count#1156L)) && (average_stars#1138 > 4.0)) && (fans#1152L > 50)) && (review_count#1156L > 200)) && (useful#1157L > 500))\n   +- *(1) FileScan json [average_stars#1138,fans#1152L,review_count#1156L,useful#1157L,user_id#1158] Batched: false, Format: JSON, Location: InMemoryFileIndex[file:/Users/jae/git/yanolja/resources/yelp_academic_dataset_user.json], PartitionFilters: [], PushedFilters: [IsNotNull(average_stars), IsNotNull(useful), IsNotNull(fans), IsNotNull(review_count), GreaterTh..., ReadSchema: struct<average_stars:double,fans:bigint,review_count:bigint,useful:bigint,user_id:string>\nuserDF: org.apache.spark.sql.DataFrame = [average_stars: double, compliment_cool: bigint ... 20 more fields]\ngoodUserDF: org.apache.spark.sql.DataFrame = [user-user_id: string]\nres14: Long = 1749\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://192.168.1.215:4040/jobs/job?id=27","http://192.168.1.215:4040/jobs/job?id=28"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1553937111639_-2088106269","id":"20190330-181151_1226211104","dateCreated":"2019-03-30T18:11:51+0900","dateStarted":"2019-04-14T14:59:16+0900","dateFinished":"2019-04-14T14:59:46+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:221"},{"text":"val goodReviewByGoodUserDF = goodUserDF.join(goodLastestReviewDF, goodLastestReviewDF(\"review-user_id\") === goodUserDF(\"user-user_id\"))\n  .drop(\"review-user_id\")\n  .drop(\"user-user_id\")\n  .distinct\n  \ngoodReviewByGoodUserDF.explain\ngoodReviewByGoodUserDF.count","user":"anonymous","dateUpdated":"2019-04-14T15:00:11+0900","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"== Physical Plan ==\n*(6) HashAggregate(keys=[review-business_id#1115], functions=[])\n+- Exchange hashpartitioning(review-business_id#1115, 200)\n   +- *(5) HashAggregate(keys=[review-business_id#1115], functions=[])\n      +- *(5) Project [review-business_id#1115]\n         +- *(5) SortMergeJoin [user-user_id#1413], [review-user_id#1118], Inner\n            :- *(2) Sort [user-user_id#1413 ASC NULLS FIRST], false, 0\n            :  +- Exchange hashpartitioning(user-user_id#1413, 200)\n            :     +- *(1) Project [user_id#1158 AS user-user_id#1413]\n            :        +- *(1) Filter ((((((((isnotnull(average_stars#1138) && isnotnull(useful#1157L)) && isnotnull(fans#1152L)) && isnotnull(review_count#1156L)) && (average_stars#1138 > 4.0)) && (fans#1152L > 50)) && (review_count#1156L > 200)) && (useful#1157L > 500)) && isnotnull(user_id#1158))\n            :           +- *(1) FileScan json [average_stars#1138,fans#1152L,review_count#1156L,useful#1157L,user_id#1158] Batched: false, Format: JSON, Location: InMemoryFileIndex[file:/Users/jae/git/yanolja/resources/yelp_academic_dataset_user.json], PartitionFilters: [], PushedFilters: [IsNotNull(average_stars), IsNotNull(useful), IsNotNull(fans), IsNotNull(review_count), GreaterTh..., ReadSchema: struct<average_stars:double,fans:bigint,review_count:bigint,useful:bigint,user_id:string>\n            +- *(4) Sort [review-user_id#1118 ASC NULLS FIRST], false, 0\n               +- Exchange hashpartitioning(review-user_id#1118, 200)\n                  +- *(3) Project [business_id#1062 AS review-business_id#1115, user_id#1070 AS review-user_id#1118]\n                     +- *(3) Filter (((((isnotnull(date#1064) && isnotnull(stars#1067)) && (date#1064 > 2018-01-01 00:00:00)) && (stars#1067 > 4.0)) && (((((((((((Contains(text#1068, good) || Contains(text#1068, Good)) || Contains(text#1068, great)) || Contains(text#1068, Great)) || Contains(text#1068, nice)) || Contains(text#1068, Nice)) || Contains(text#1068, cool)) || Contains(text#1068, Cool)) || Contains(text#1068, wonderful)) || Contains(text#1068, impressive)) || Contains(text#1068, fine)) || Contains(text#1068, excellent))) && isnotnull(user_id#1070))\n                        +- *(3) FileScan json [business_id#1062,date#1064,stars#1067,text#1068,user_id#1070] Batched: false, Format: JSON, Location: InMemoryFileIndex[file:/Users/jae/git/yanolja/resources/yelp_academic_dataset_review.json], PartitionFilters: [], PushedFilters: [IsNotNull(date), IsNotNull(stars), GreaterThan(date,2018-01-01 00:00:00), GreaterThan(stars,4.0)..., ReadSchema: struct<business_id:string,date:string,stars:double,text:string,user_id:string>\ngoodReviewByGoodUserDF: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [review-business_id: string]\nres15: Long = 2379\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://192.168.1.215:4040/jobs/job?id=29"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1553936510871_153236353","id":"20190330-180150_1268983712","dateCreated":"2019-03-30T18:01:50+0900","dateStarted":"2019-04-14T15:00:11+0900","dateFinished":"2019-04-14T15:01:23+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:222"},{"text":"val result = goodReviewByGoodUserDF.join(goodBusinessDF, goodReviewByGoodUserDF(\"review-business_id\") === goodBusinessDF(\"business-business_id\"))\n  .drop(\"review-business_id\")\n  .withColumnRenamed(\"business-business_id\", \"business_id\")\n  \nresult.explain\nresult.count","user":"anonymous","dateUpdated":"2019-04-14T15:01:55+0900","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"== Physical Plan ==\n*(9) Project [address#920, business-business_id#1034 AS business_id#1482, city#924, latitude#927, longitude#928, name#929]\n+- *(9) SortMergeJoin [review-business_id#1115], [business-business_id#1034], Inner\n   :- *(6) Sort [review-business_id#1115 ASC NULLS FIRST], false, 0\n   :  +- *(6) HashAggregate(keys=[review-business_id#1115], functions=[])\n   :     +- Exchange hashpartitioning(review-business_id#1115, 200)\n   :        +- *(5) HashAggregate(keys=[review-business_id#1115], functions=[])\n   :           +- *(5) Project [review-business_id#1115]\n   :              +- *(5) SortMergeJoin [user-user_id#1413], [review-user_id#1118], Inner\n   :                 :- *(2) Sort [user-user_id#1413 ASC NULLS FIRST], false, 0\n   :                 :  +- Exchange hashpartitioning(user-user_id#1413, 200)\n   :                 :     +- *(1) Project [user_id#1158 AS user-user_id#1413]\n   :                 :        +- *(1) Filter ((((((((isnotnull(average_stars#1138) && isnotnull(useful#1157L)) && isnotnull(fans#1152L)) && isnotnull(review_count#1156L)) && (average_stars#1138 > 4.0)) && (fans#1152L > 50)) && (review_count#1156L > 200)) && (useful#1157L > 500)) && isnotnull(user_id#1158))\n   :                 :           +- *(1) FileScan json [average_stars#1138,fans#1152L,review_count#1156L,useful#1157L,user_id#1158] Batched: false, Format: JSON, Location: InMemoryFileIndex[file:/Users/jae/git/yanolja/resources/yelp_academic_dataset_user.json], PartitionFilters: [], PushedFilters: [IsNotNull(average_stars), IsNotNull(useful), IsNotNull(fans), IsNotNull(review_count), GreaterTh..., ReadSchema: struct<average_stars:double,fans:bigint,review_count:bigint,useful:bigint,user_id:string>\n   :                 +- *(4) Sort [review-user_id#1118 ASC NULLS FIRST], false, 0\n   :                    +- Exchange hashpartitioning(review-user_id#1118, 200)\n   :                       +- *(3) Project [business_id#1062 AS review-business_id#1115, user_id#1070 AS review-user_id#1118]\n   :                          +- *(3) Filter ((((((isnotnull(date#1064) && isnotnull(stars#1067)) && (date#1064 > 2018-01-01 00:00:00)) && (stars#1067 > 4.0)) && (((((((((((Contains(text#1068, good) || Contains(text#1068, Good)) || Contains(text#1068, great)) || Contains(text#1068, Great)) || Contains(text#1068, nice)) || Contains(text#1068, Nice)) || Contains(text#1068, cool)) || Contains(text#1068, Cool)) || Contains(text#1068, wonderful)) || Contains(text#1068, impressive)) || Contains(text#1068, fine)) || Contains(text#1068, excellent))) && isnotnull(user_id#1070)) && isnotnull(business_id#1062))\n   :                             +- *(3) FileScan json [business_id#1062,date#1064,stars#1067,text#1068,user_id#1070] Batched: false, Format: JSON, Location: InMemoryFileIndex[file:/Users/jae/git/yanolja/resources/yelp_academic_dataset_review.json], PartitionFilters: [], PushedFilters: [IsNotNull(date), IsNotNull(stars), GreaterThan(date,2018-01-01 00:00:00), GreaterThan(stars,4.0)..., ReadSchema: struct<business_id:string,date:string,stars:double,text:string,user_id:string>\n   +- *(8) Sort [business-business_id#1034 ASC NULLS FIRST], false, 0\n      +- Exchange hashpartitioning(business-business_id#1034, 200)\n         +- *(7) Project [address#920, business_id#922 AS business-business_id#1034, city#924, latitude#927, longitude#928, name#929]\n            +- *(7) Filter ((((((isnotnull(review_count#931L) && isnotnull(is_open#926L)) && isnotnull(stars#932)) && (stars#932 > 4.0)) && (review_count#931L > 100)) && (is_open#926L = 1)) && isnotnull(business_id#922))\n               +- *(7) FileScan json [address#920,business_id#922,city#924,is_open#926L,latitude#927,longitude#928,name#929,review_count#931L,stars#932] Batched: false, Format: JSON, Location: InMemoryFileIndex[file:/Users/jae/git/yanolja/resources/yelp_academic_dataset_business.json], PartitionFilters: [], PushedFilters: [IsNotNull(review_count), IsNotNull(is_open), IsNotNull(stars), GreaterThan(stars,4.0), GreaterTh..., ReadSchema: struct<address:string,business_id:string,city:string,is_open:bigint,latitude:double,longitude:dou...\nresult: org.apache.spark.sql.DataFrame = [address: string, business_id: string ... 4 more fields]\nres16: Long = 424\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://192.168.1.215:4040/jobs/job?id=30","http://192.168.1.215:4040/jobs/job?id=31"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1553936717331_-1049240866","id":"20190330-180517_1971140359","dateCreated":"2019-03-30T18:05:17+0900","dateStarted":"2019-04-14T15:01:55+0900","dateFinished":"2019-04-14T15:03:03+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:223"},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1554130860191_148138700","id":"20190402-000100_508815104","dateCreated":"2019-04-02T00:01:00+0900","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:224"}],"name":"yanolja","id":"2E94A16AS","noteParams":{},"noteForms":{},"angularObjects":{"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}