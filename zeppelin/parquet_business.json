{"paragraphs":[{"text":"val businessDF = spark.read.parquet(\"/Users/jae/git/yanolja/resources/business-by-id\").drop(\"attributes\")\nval goodBusinessDF = businessDF\n      .filter(businessDF.col(\"stars\") > 4) // star 많이 받은 가게\n      .filter(businessDF.col(\"review_count\") > 100) // 리뷰가 충분히 있는 가게\n      .filter(businessDF.col(\"is_open\") === 1) // 현재 운영 중인 가게\n      .drop(\"is_open\")\n      .drop(\"review_count\")\n      .drop(\"stars\")\n      .drop(\"attributes\")\n      .drop(\"categories\")\n      .drop(\"hours\")\n      .drop(\"postal_code\")\n      .drop(\"state\")\n      .withColumnRenamed(\"business_id\", \"business-business_id\")\n    //      .withColumnRenamed(\"address\", \"business-address\")\n    //      .withColumnRenamed(\"city\", \"business-city\")\n    //      .withColumnRenamed(\"latitude\", \"business-latitude\")\n    //      .withColumnRenamed(\"longitude\", \"business-longitude\")\n    //      .withColumnRenamed(\"name\", \"business-name\")\ngoodBusinessDF.explain\ngoodBusinessDF.count\n// goodBusinessDF.show","user":"anonymous","dateUpdated":"2019-04-14T14:54:19+0900","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"== Physical Plan ==\n*(1) Project [address#224, business_id#226 AS business-business_id#338, city#228, latitude#231, longitude#232, name#233]\n+- *(1) Filter (((((isnotnull(is_open#230L) && isnotnull(stars#236)) && isnotnull(review_count#235L)) && (stars#236 > 4.0)) && (review_count#235L > 100)) && (is_open#230L = 1))\n   +- *(1) FileScan parquet [address#224,business_id#226,city#228,is_open#230L,latitude#231,longitude#232,name#233,review_count#235L,stars#236] Batched: true, Format: Parquet, Location: InMemoryFileIndex[file:/Users/jae/git/yanolja/resources/business-by-id], PartitionFilters: [], PushedFilters: [IsNotNull(is_open), IsNotNull(stars), IsNotNull(review_count), GreaterThan(stars,4.0), GreaterTh..., ReadSchema: struct<address:string,business_id:string,city:string,is_open:bigint,latitude:double,longitude:dou...\nbusinessDF: org.apache.spark.sql.DataFrame = [address: string, business_id: string ... 11 more fields]\ngoodBusinessDF: org.apache.spark.sql.DataFrame = [address: string, business-business_id: string ... 4 more fields]\nres6: Long = 2623\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://192.168.1.215:4040/jobs/job?id=12","http://192.168.1.215:4040/jobs/job?id=13"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1555146981707_-465536079","id":"20190330-180130_707678747","dateCreated":"2019-04-13T18:16:21+0900","dateStarted":"2019-04-14T14:54:19+0900","dateFinished":"2019-04-14T14:54:22+0900","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1703"},{"text":"val reviewDF = spark.read.parquet(\"/Users/jae/git/yanolja/resources/reviews-by-id\")\nval goodLastestReviewDF = reviewDF\n  .filter(reviewDF.col(\"date\") > \"2018-01-01 00:00:00\") // 2018 년 이후 리뷰만\n  .filter(reviewDF.col(\"stars\") > 4) // star 많이 맏은 리뷰만\n  .filter(reviewDF.col(\"text\").contains(\"good\") || reviewDF.col(\"text\").contains(\"Good\") ||\n  reviewDF.col(\"text\").contains(\"great\") || reviewDF.col(\"text\").contains(\"Great\") ||\n  reviewDF.col(\"text\").contains(\"nice\") || reviewDF.col(\"text\").contains(\"Nice\") ||\n  reviewDF.col(\"text\").contains(\"cool\") || reviewDF.col(\"text\").contains(\"Cool\") ||\n  reviewDF.col(\"text\").contains(\"wonderful\") || reviewDF.col(\"text\").contains(\"impressive\") ||\n  reviewDF.col(\"text\").contains(\"fine\") || reviewDF.col(\"text\").contains(\"excellent\"))\n  .drop(\"stars\")\n  .drop(\"funny\")\n  .drop(\"cool\")\n  .drop(\"useful\")\n  .drop(\"review_id\")\n  .drop(\"date\")\n  .drop(\"text\")\n  .withColumnRenamed(\"business_id\", \"review-business_id\")\n  .withColumnRenamed(\"user_id\", \"review-user_id\") // 뒤에서 조인해서 신뢰할 만한 유저가 쓴건지 봐야지\n\n// goodLastestReviewDF.printSchema\ngoodLastestReviewDF.explain\ngoodLastestReviewDF.count\n\n// goodLastestReviewDF.show","user":"anonymous","dateUpdated":"2019-04-14T14:54:28+0900","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":11,"editorMode":"ace/mode/scala","fontSize":9,"results":{"0":{"graph":{"mode":"table","height":219,"optionOpen":false}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"== Physical Plan ==\n*(1) Project [business_id#357 AS review-business_id#410, user_id#365 AS review-user_id#413]\n+- *(1) Filter ((((isnotnull(stars#362) && isnotnull(date#359)) && (date#359 > 2018-01-01 00:00:00)) && (stars#362 > 4.0)) && (((((((((((Contains(text#363, good) || Contains(text#363, Good)) || Contains(text#363, great)) || Contains(text#363, Great)) || Contains(text#363, nice)) || Contains(text#363, Nice)) || Contains(text#363, cool)) || Contains(text#363, Cool)) || Contains(text#363, wonderful)) || Contains(text#363, impressive)) || Contains(text#363, fine)) || Contains(text#363, excellent)))\n   +- *(1) FileScan parquet [business_id#357,date#359,stars#362,text#363,user_id#365] Batched: true, Format: Parquet, Location: InMemoryFileIndex[file:/Users/jae/git/yanolja/resources/reviews-by-id], PartitionFilters: [], PushedFilters: [IsNotNull(stars), IsNotNull(date), GreaterThan(date,2018-01-01 00:00:00), GreaterThan(stars,4.0)..., ReadSchema: struct<business_id:string,date:string,stars:double,text:string,user_id:string>\nreviewDF: org.apache.spark.sql.DataFrame = [business_id: string, cool: bigint ... 7 more fields]\ngoodLastestReviewDF: org.apache.spark.sql.DataFrame = [review-business_id: string, review-user_id: string]\nres7: Long = 388260\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://192.168.1.215:4040/jobs/job?id=14","http://192.168.1.215:4040/jobs/job?id=15"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1555146981709_489323127","id":"20190330-181152_1547121082","dateCreated":"2019-04-13T18:16:21+0900","dateStarted":"2019-04-14T14:54:28+0900","dateFinished":"2019-04-14T14:54:52+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1704"},{"text":"val userDF = spark.read.parquet(\"/Users/jae/git/yanolja/resources/users-by-id\")\nval goodUserDF = userDF\n  .filter(userDF.col(\"average_stars\") > 4) // good user\n  .filter(userDF.col(\"fans\") > 50) // famous user\n  .filter(userDF.col(\"review_count\") > 200) // famous user\n  .filter(userDF.col(\"useful\") > 500) // famous user\n  .drop(\"average_stars\")\n  .drop(\"fans\")\n  .drop(\"friends\")\n  .drop(\"review_count\")\n  .drop(\"useful\")\n  .drop(\"compliment_cool\")\n  .drop(\"compliment_cute\")\n  .drop(\"compliment_funny\")\n  .drop(\"compliment_hot\")\n  .drop(\"compliment_list\")\n  .drop(\"compliment_more\")\n  .drop(\"compliment_note\")\n  .drop(\"compliment_photos\")\n  .drop(\"compliment_plain\")\n  .drop(\"compliment_profile\")\n  .drop(\"compliment_writer\")\n  .drop(\"cool\")\n  .drop(\"elite\")\n  .drop(\"funny\")\n  .drop(\"name\")\n  .drop(\"yelping_since\")\n  .withColumnRenamed(\"user_id\", \"user-user_id\")\n      \ngoodUserDF.explain\ngoodUserDF.count\n// goodUserDF.show","user":"anonymous","dateUpdated":"2019-04-14T14:55:10+0900","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"== Physical Plan ==\n*(1) Project [user_id#444 AS user-user_id#699]\n+- *(1) Filter (((((((isnotnull(review_count#442L) && isnotnull(fans#438L)) && isnotnull(average_stars#424)) && isnotnull(useful#443L)) && (average_stars#424 > 4.0)) && (fans#438L > 50)) && (review_count#442L > 200)) && (useful#443L > 500))\n   +- *(1) FileScan parquet [average_stars#424,fans#438L,review_count#442L,useful#443L,user_id#444] Batched: true, Format: Parquet, Location: InMemoryFileIndex[file:/Users/jae/git/yanolja/resources/users-by-id], PartitionFilters: [], PushedFilters: [IsNotNull(review_count), IsNotNull(fans), IsNotNull(average_stars), IsNotNull(useful), GreaterTh..., ReadSchema: struct<average_stars:double,fans:bigint,review_count:bigint,useful:bigint,user_id:string>\nuserDF: org.apache.spark.sql.DataFrame = [average_stars: double, compliment_cool: bigint ... 20 more fields]\ngoodUserDF: org.apache.spark.sql.DataFrame = [user-user_id: string]\nres8: Long = 1749\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://192.168.1.215:4040/jobs/job?id=16","http://192.168.1.215:4040/jobs/job?id=17"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1555146981710_-958674103","id":"20190330-181151_1226211104","dateCreated":"2019-04-13T18:16:21+0900","dateStarted":"2019-04-14T14:55:10+0900","dateFinished":"2019-04-14T14:55:13+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1705"},{"text":"val goodReviewByGoodUserDF = goodUserDF.join(goodLastestReviewDF, goodLastestReviewDF(\"review-user_id\") === goodUserDF(\"user-user_id\"))\n  .drop(\"review-user_id\")\n  .drop(\"user-user_id\")\n  .distinct\n  \ngoodReviewByGoodUserDF.explain\ngoodReviewByGoodUserDF.count","user":"anonymous","dateUpdated":"2019-04-14T14:55:24+0900","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"== Physical Plan ==\n*(6) HashAggregate(keys=[review-business_id#410], functions=[])\n+- Exchange hashpartitioning(review-business_id#410, 200)\n   +- *(5) HashAggregate(keys=[review-business_id#410], functions=[])\n      +- *(5) Project [review-business_id#410]\n         +- *(5) SortMergeJoin [user-user_id#699], [review-user_id#413], Inner\n            :- *(2) Sort [user-user_id#699 ASC NULLS FIRST], false, 0\n            :  +- Exchange hashpartitioning(user-user_id#699, 200)\n            :     +- *(1) Project [user_id#444 AS user-user_id#699]\n            :        +- *(1) Filter ((((((((isnotnull(review_count#442L) && isnotnull(fans#438L)) && isnotnull(average_stars#424)) && isnotnull(useful#443L)) && (average_stars#424 > 4.0)) && (fans#438L > 50)) && (review_count#442L > 200)) && (useful#443L > 500)) && isnotnull(user_id#444))\n            :           +- *(1) FileScan parquet [average_stars#424,fans#438L,review_count#442L,useful#443L,user_id#444] Batched: true, Format: Parquet, Location: InMemoryFileIndex[file:/Users/jae/git/yanolja/resources/users-by-id], PartitionFilters: [], PushedFilters: [IsNotNull(review_count), IsNotNull(fans), IsNotNull(average_stars), IsNotNull(useful), GreaterTh..., ReadSchema: struct<average_stars:double,fans:bigint,review_count:bigint,useful:bigint,user_id:string>\n            +- *(4) Sort [review-user_id#413 ASC NULLS FIRST], false, 0\n               +- Exchange hashpartitioning(review-user_id#413, 200)\n                  +- *(3) Project [business_id#357 AS review-business_id#410, user_id#365 AS review-user_id#413]\n                     +- *(3) Filter (((((isnotnull(stars#362) && isnotnull(date#359)) && (date#359 > 2018-01-01 00:00:00)) && (stars#362 > 4.0)) && (((((((((((Contains(text#363, good) || Contains(text#363, Good)) || Contains(text#363, great)) || Contains(text#363, Great)) || Contains(text#363, nice)) || Contains(text#363, Nice)) || Contains(text#363, cool)) || Contains(text#363, Cool)) || Contains(text#363, wonderful)) || Contains(text#363, impressive)) || Contains(text#363, fine)) || Contains(text#363, excellent))) && isnotnull(user_id#365))\n                        +- *(3) FileScan parquet [business_id#357,date#359,stars#362,text#363,user_id#365] Batched: true, Format: Parquet, Location: InMemoryFileIndex[file:/Users/jae/git/yanolja/resources/reviews-by-id], PartitionFilters: [], PushedFilters: [IsNotNull(stars), IsNotNull(date), GreaterThan(date,2018-01-01 00:00:00), GreaterThan(stars,4.0)..., ReadSchema: struct<business_id:string,date:string,stars:double,text:string,user_id:string>\ngoodReviewByGoodUserDF: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [review-business_id: string]\nres9: Long = 2379\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://192.168.1.215:4040/jobs/job?id=18"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1555146981710_424279191","id":"20190330-180150_1268983712","dateCreated":"2019-04-13T18:16:21+0900","dateStarted":"2019-04-14T14:55:24+0900","dateFinished":"2019-04-14T14:56:13+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1706"},{"text":"val result = goodReviewByGoodUserDF.join(goodBusinessDF, goodReviewByGoodUserDF(\"review-business_id\") === goodBusinessDF(\"business-business_id\"))\n  .drop(\"review-business_id\")\n  .withColumnRenamed(\"business-business_id\", \"business_id\")\n  \nresult.explain\nresult.count","user":"anonymous","dateUpdated":"2019-04-14T14:56:17+0900","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"== Physical Plan ==\n*(7) Project [address#224, business-business_id#338 AS business_id#754, city#228, latitude#231, longitude#232, name#233]\n+- *(7) BroadcastHashJoin [review-business_id#410], [business-business_id#338], Inner, BuildRight\n   :- *(7) HashAggregate(keys=[review-business_id#410], functions=[])\n   :  +- Exchange hashpartitioning(review-business_id#410, 200)\n   :     +- *(5) HashAggregate(keys=[review-business_id#410], functions=[])\n   :        +- *(5) Project [review-business_id#410]\n   :           +- *(5) SortMergeJoin [user-user_id#699], [review-user_id#413], Inner\n   :              :- *(2) Sort [user-user_id#699 ASC NULLS FIRST], false, 0\n   :              :  +- Exchange hashpartitioning(user-user_id#699, 200)\n   :              :     +- *(1) Project [user_id#444 AS user-user_id#699]\n   :              :        +- *(1) Filter ((((((((isnotnull(review_count#442L) && isnotnull(fans#438L)) && isnotnull(average_stars#424)) && isnotnull(useful#443L)) && (average_stars#424 > 4.0)) && (fans#438L > 50)) && (review_count#442L > 200)) && (useful#443L > 500)) && isnotnull(user_id#444))\n   :              :           +- *(1) FileScan parquet [average_stars#424,fans#438L,review_count#442L,useful#443L,user_id#444] Batched: true, Format: Parquet, Location: InMemoryFileIndex[file:/Users/jae/git/yanolja/resources/users-by-id], PartitionFilters: [], PushedFilters: [IsNotNull(review_count), IsNotNull(fans), IsNotNull(average_stars), IsNotNull(useful), GreaterTh..., ReadSchema: struct<average_stars:double,fans:bigint,review_count:bigint,useful:bigint,user_id:string>\n   :              +- *(4) Sort [review-user_id#413 ASC NULLS FIRST], false, 0\n   :                 +- Exchange hashpartitioning(review-user_id#413, 200)\n   :                    +- *(3) Project [business_id#357 AS review-business_id#410, user_id#365 AS review-user_id#413]\n   :                       +- *(3) Filter ((((((isnotnull(stars#362) && isnotnull(date#359)) && (date#359 > 2018-01-01 00:00:00)) && (stars#362 > 4.0)) && (((((((((((Contains(text#363, good) || Contains(text#363, Good)) || Contains(text#363, great)) || Contains(text#363, Great)) || Contains(text#363, nice)) || Contains(text#363, Nice)) || Contains(text#363, cool)) || Contains(text#363, Cool)) || Contains(text#363, wonderful)) || Contains(text#363, impressive)) || Contains(text#363, fine)) || Contains(text#363, excellent))) && isnotnull(user_id#365)) && isnotnull(business_id#357))\n   :                          +- *(3) FileScan parquet [business_id#357,date#359,stars#362,text#363,user_id#365] Batched: true, Format: Parquet, Location: InMemoryFileIndex[file:/Users/jae/git/yanolja/resources/reviews-by-id], PartitionFilters: [], PushedFilters: [IsNotNull(stars), IsNotNull(date), GreaterThan(date,2018-01-01 00:00:00), GreaterThan(stars,4.0)..., ReadSchema: struct<business_id:string,date:string,stars:double,text:string,user_id:string>\n   +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, string, true]))\n      +- *(6) Project [address#224, business_id#226 AS business-business_id#338, city#228, latitude#231, longitude#232, name#233]\n         +- *(6) Filter ((((((isnotnull(is_open#230L) && isnotnull(stars#236)) && isnotnull(review_count#235L)) && (stars#236 > 4.0)) && (review_count#235L > 100)) && (is_open#230L = 1)) && isnotnull(business_id#226))\n            +- *(6) FileScan parquet [address#224,business_id#226,city#228,is_open#230L,latitude#231,longitude#232,name#233,review_count#235L,stars#236] Batched: true, Format: Parquet, Location: InMemoryFileIndex[file:/Users/jae/git/yanolja/resources/business-by-id], PartitionFilters: [], PushedFilters: [IsNotNull(is_open), IsNotNull(stars), IsNotNull(review_count), GreaterThan(stars,4.0), GreaterTh..., ReadSchema: struct<address:string,business_id:string,city:string,is_open:bigint,latitude:double,longitude:dou...\nresult: org.apache.spark.sql.DataFrame = [address: string, business_id: string ... 4 more fields]\nres10: Long = 424\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://192.168.1.215:4040/jobs/job?id=19","http://192.168.1.215:4040/jobs/job?id=20"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1555146981711_-1584550484","id":"20190330-180517_1971140359","dateCreated":"2019-04-13T18:16:21+0900","dateStarted":"2019-04-14T14:56:17+0900","dateFinished":"2019-04-14T14:57:04+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1707"},{"user":"anonymous","dateUpdated":"2019-04-13T18:16:21+0900","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555146981712_-19441893","id":"20190402-000100_508815104","dateCreated":"2019-04-13T18:16:21+0900","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1708"}],"name":"parquet/business","id":"2EA1WAB69","noteParams":{},"noteForms":{},"angularObjects":{"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}